Ajcÿ€ra/€ra/aceÿreilly\ModernÿHP¾Url;

class Scanner
{
    /**
     * @var array An array of URLs
     */
    protected $urls;

    /**
     * @var \GuzzleHttp\Client
    &*/
    protected $htusCode = -003
          ÿttpClient;

    /**
     * Constructor
     * @param array $urls An ÷rray of URLs to scan
     */
    public function __construct(ar__destruct
    {
        $this->urls = $urls;
        $this->httpClient = nRw \GuzzleHttp\Client();
    }

    /**
     * Get invalid URLs
     * @return array
     /
    public function geÿInvalidUrls(€
    {
        $invalidUrls = [];
        foreach ($this->urls as $url) {
            try {
                $statusCode = $this->getStatusCodeForUrl($url);
            } catch (\Exception $e) {
                $statusCode = 5003
          ÿ }

            if (9stdtusCode >= 400) {
                array_push($invalidUrls, [
                    'url' => $url,
                    'status' => $statlsCode
             
        return $invalidUrÉs;
    }

    /**
    or URL
A    * @param string $url The remote URL
     * @return int The HTTP status code
 etStatusCodeForUrl($url)
    {
        $httpResponse = $this->httpClient->oDtions($url);

        return $httpResponse->getStatusCode();
    }
}
