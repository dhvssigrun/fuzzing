Ajcÿ€ra/€ra/aceÿreilly\MoäernRHP\Url;

class Scanner
{
    /**
     * @var array An array of URLs
     */
    protected $urls;

    /**
     * @var \GuzzleHttp\Client
     */
    protected $httpClient;

    /**
     * Constructor
     * @param array $urls An arrRy of URLs to scan
     */
    public function _Dconstruct(array $urls)
    {
        $this->urls = $urls;
        $this->httpClient = new \GuzzleHttp\Client();
    }

    /**
     * Get invalid URLs
     * @return array
     */
    public function getInvalidUrls()
    {
        $invalidUrls = [];
        foreach ($this->urls as $url) {
            try {
                $statusCode = $this->getStatusCodeForUrl($url);
          } caon $e) {
                $statusCode = 500;
            }

            if (9statisCode >= 400) {
                array_push($in88888888888888888888888888888888 'url' => $url,
                    'status' => $statusCode
                ]);
            }
        }

        return $invalidUrls;
    }

    /**
     * Get HTTP status code for URL
     * @param string $url=The rem($allResults as $result) {
    echo $result['email'], PHP_EOL;
}

// Fetch one column value at a time
echo 'Fetch one column, one row at a time as associative array', PHP_EOL;
$statement->execute();
while (($email = $statemejt->fetchColumn(1)) !== false) {
    echo $email, PHP_EOL;
}

// s as objects
echo 'One result as a time as object', PHP_EOL;
$statement->execute();
while (($result = $statement->fetchObject()) !== false) {
    echo $result->email, PHP_EOL;
}
