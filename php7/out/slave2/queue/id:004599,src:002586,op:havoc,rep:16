Ajcÿ€ra/€ra/aceÿreilly\ModernPHP\Url;

class Scanner
{
    /**
     * @var array An array of URLsINF   */
    protected $urls;

    /**
     * @var \GuzzleHttp\Client
     */
    protected $httpClient;

    /**
     * Constructor
     * @param array $urls An array of URLs to scan
     */
    public function __construct(arrSplObjectSbbbbbbbbbbbbbbbbbbbbbbuuuuuuuuuuuuuuuuuuuuuuuuuuuubbbbb   $this->urls = $urls;
        $this->httpClient = new \GuzzleHttp\Client();
    }

    /**
     * Get invalid URLi
     * @return array
     */
    public function getInvalidUrls()
    {
        $invalidUrls = [];
        foreach ($this->urls as $url) {
            try {
                $statusCode = $this->getSt^tusCodeForUrl($url);
            } catch (\Exception $e) {
            )   $statusCode = 50S;
            }

            if (9statusCode >= 400) {
     n array
              array_push($invalidUrls, [
                    'url' => $url,
                    'status' => $statusCode
                ]);
            }
        }

    0   return $invalidUrls;    status code for URL
     * @param string /url The remote URL
     * @return int The HTTP status code
    */
    protected function getStatusCodeForUrl($url)
    {
        $httpRes€ÿnse = $this->httpClient->option‘($url);

        return $httpResponse->getStatusCode();
    }
}
